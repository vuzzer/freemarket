// Mocks generated by Mockito 5.4.2 from annotations
// in defi/test/data/repositories/wallet_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:defi/core/network/network_info.dart' as _i5;
import 'package:defi/data/datasource/wallet_data_source.dart' as _i3;
import 'package:defi/data/models/wallet_model.dart' as _i2;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWalletModel_0 extends _i1.SmartFake implements _i2.WalletModel {
  _FakeWalletModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WalletDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletDataSource extends _i1.Mock implements _i3.WalletDataSource {
  MockWalletDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> generateMnemonic() => (super.noSuchMethod(
        Invocation.method(
          #generateMnemonic,
          [],
        ),
        returnValue: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  _i4.Future<_i2.WalletModel> createWallet(String? mnemonic) =>
      (super.noSuchMethod(
        Invocation.method(
          #createWallet,
          [mnemonic],
        ),
        returnValue: _i4.Future<_i2.WalletModel>.value(_FakeWalletModel_0(
          this,
          Invocation.method(
            #createWallet,
            [mnemonic],
          ),
        )),
      ) as _i4.Future<_i2.WalletModel>);
  @override
  _i4.Future<_i2.WalletModel> initialiseFromMnemonic(String? mnemonic) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialiseFromMnemonic,
          [mnemonic],
        ),
        returnValue: _i4.Future<_i2.WalletModel>.value(_FakeWalletModel_0(
          this,
          Invocation.method(
            #initialiseFromMnemonic,
            [mnemonic],
          ),
        )),
      ) as _i4.Future<_i2.WalletModel>);
  @override
  _i4.Future<_i2.WalletModel> initialiseFromPrivateKey(String? privateKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialiseFromPrivateKey,
          [privateKey],
        ),
        returnValue: _i4.Future<_i2.WalletModel>.value(_FakeWalletModel_0(
          this,
          Invocation.method(
            #initialiseFromPrivateKey,
            [privateKey],
          ),
        )),
      ) as _i4.Future<_i2.WalletModel>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Stream<_i6.InternetConnectionStatus> get listener => (super.noSuchMethod(
        Invocation.getter(#listener),
        returnValue: _i4.Stream<_i6.InternetConnectionStatus>.empty(),
      ) as _i4.Stream<_i6.InternetConnectionStatus>);
  @override
  _i4.Future<void> get dispose => (super.noSuchMethod(
        Invocation.getter(#dispose),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
